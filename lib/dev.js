// Generated by CoffeeScript 1.9.1
(function() {
  var chokidar, e, nwgui, nwwin, watcher,
    hasProp = {}.hasOwnProperty;

  window.CRASHED = false;

  if (typeof process !== "undefined" && process !== null) {
    nwgui = window.require('nw.gui');
    nwwin = nwgui.Window.get(window);
    process.removeAllListeners("uncaughtException");
    process.on("uncaughtException", function(e) {
      var ref;
      if (!window.CRASHED) {
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.warn === "function") {
            console.warn("CRASH");
          }
        }
      }
      window.CRASHED = true;
      if (!nwwin.isDevToolsOpen()) {
        nwwin.showDevTools();
      }
      if (((ref = nwgui.App.manifest.window) != null ? ref.show : void 0) === false) {
        return nwwin.show();
      }
    });
    try {
      chokidar = require("chokidar");
      watcher = chokidar.watch(".", {
        ignored: /node_modules|\.git/
      });
      watcher.on("change", function(path) {
        var k, ref;
        watcher.close();
        ref = global.require.cache;
        for (k in ref) {
          if (!hasProp.call(ref, k)) continue;
          delete global.require.cache[k];
        }
        nwwin.closeDevTools();
        return typeof location !== "undefined" && location !== null ? location.reload() : void 0;
      });
    } catch (_error) {
      e = _error;
      console.warn("Live reload disabled:", e.stack);
    }
    window.addEventListener("keydown", function(e) {
      if (e.keyCode === 123) {
        if (nwwin.isDevToolsOpen()) {
          return nwwin.closeDevTools();
        } else {
          return nwwin.showDevTools();
        }
      }
    });
  }

  window.onerror = function(e) {
    if (!window.CRASHED) {
      if (typeof console !== "undefined" && console !== null) {
        if (typeof console.warn === "function") {
          console.warn("CRASH");
        }
      }
    }
    window.CRASHED = true;
    return typeof console !== "undefined" && console !== null ? typeof console.error === "function" ? console.error("Got exception:", e) : void 0 : void 0;
  };

}).call(this);
